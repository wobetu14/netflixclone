{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\netflix-app\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport movieTrailer from 'movie-trailer';\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from './axios';\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchURL,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // URL\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).se);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row_posters\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => handleClick(movie),\n          src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          className: `row_poster ${isLargeRow && 'row_posterLarge'}`\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/wamp64/www/netflix-app/src/Row.js"],"names":["movieTrailer","React","useState","useEffect","YouTube","axios","base_url","Row","title","fetchURL","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerUrl","setTrailerUrl","then","url","urlParams","URLSearchParams","URL","se","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAC,qCAAf;;AAEA,SAASC,GAAT,OAA4C;AAAA;;AAAA,MAA/B;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAA+B;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,SAAf,GAA2B;AACtB,YAAMC,OAAO,GAAC,MAAMT,KAAK,CAACU,GAAN,CAAUN,QAAV,CAApB;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACJ;;AAEDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACJ,QAAD,CARM,CAAT;AAUA,QAAMS,IAAI,GAAC;AACTC,IAAAA,MAAM,EAAC,KADE;AAETC,IAAAA,KAAK,EAAC,MAFG;AAGTC,IAAAA,UAAU,EAAC;AACT;AACAC,MAAAA,QAAQ,EAAC;AAFA;AAHF,GAAX;;AASA,QAAMC,WAAW,GAAEC,KAAD,IAAS;AACzB,QAAGC,UAAH,EAAc;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEM;AACJ1B,MAAAA,YAAY,CAAC,CAAAwB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEhB,KAAP,KAAgB,EAAjB,CAAZ,CACCmB,IADD,CACOC,GAAD,IAAO;AACX,cAAMC,SAAS,GAAC,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,EAAjC,CAAhB;AACD,OAHD;AAID;AACF,GATD;;AAWA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAA,kBAAKxB;AAAL;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBAEMG,MAAM,CAACsB,GAAP,CAAWT,KAAK,iBACd;AAEA,UAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAFxB;AAGA,UAAA,GAAG,EAAG,GAAElB,QAAS,GAAEI,UAAU,GAAGc,KAAK,CAACU,WAAT,GAAsBV,KAAK,CAACW,aAAc,EAHvE;AAIA,UAAA,SAAS,EAAG,cAAazB,UAAU,IAAI,iBAAkB;AAJzD,WACKc,KAAK,CAACY,EADX;AAAA;AAAA;AAAA;AAAA,gBADF;AAFN;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAkBKX,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEP;AAApC;AAAA;AAAA;AAAA;AAAA,YAlBnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GAzDQX,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import movieTrailer from 'movie-trailer';\r\nimport React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title, fetchURL, isLargeRow}) {\r\n    const [movies, setMovies]=useState([]);\r\n    \r\n    useEffect(() => {\r\n      async function fetchData() {\r\n           const request=await axios.get(fetchURL);\r\n           setMovies(request.data.results)\r\n           return request;\r\n      }\r\n\r\n      fetchData();\r\n    }, [fetchURL]);\r\n\r\n    const opts={\r\n      height:\"390\",\r\n      width:\"100%\",\r\n      playerVars:{\r\n        // URL\r\n        autoplay:1,\r\n      }\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n      if(trailerUrl){\r\n        setTrailerUrl(\"\");\r\n      } else{\r\n        movieTrailer(movie?.title || \"\")\r\n        .then((url)=>{\r\n          const urlParams=new URLSearchParams(new URL(url).se)\r\n        })\r\n      }\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <h2>{title}</h2>\r\n\r\n                <div className=\"row_posters\">\r\n                    {\r\n                      movies.map(movie =>(\r\n                        <img \r\n                        key={movie.id}\r\n                        onClick={()=>handleClick(movie)}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                         />\r\n                      ))\r\n                    }\r\n                </div> \r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />} \r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}