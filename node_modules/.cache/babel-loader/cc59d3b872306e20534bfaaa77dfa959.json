{"ast":null,"code":"import _regeneratorRuntime from\"C:/wamp64/www/netflix-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/wamp64/www/netflix-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/wamp64/www/netflix-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import movieTrailer from'movie-trailer';import React,{useState,useEffect}from'react';import YouTube from'react-youtube';import axios from'./axios';import'./Row.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original\";function Row(_ref){var title=_ref.title,fetchURL=_ref.fetchURL,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchURL);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchURL]);var opts={height:\"390\",width:\"100%\",playerVars:{// URL\nautoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.title)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),className:\"row_poster \".concat(isLargeRow&&'row_posterLarge')},movie.id);})})]}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["C:/wamp64/www/netflix-app/src/Row.js"],"names":["movieTrailer","React","useState","useEffect","YouTube","axios","base_url","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"6aAAA,MAAOA,CAAAA,YAAP,KAAyB,eAAzB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAC,qCAAf,CAEA,QAASC,CAAAA,GAAT,MAA4C,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAvBC,QAAuB,MAAvBA,QAAuB,CAAbC,UAAa,MAAbA,UAAa,CACxC,cAA0BR,QAAQ,CAAC,EAAD,CAAlC,wCAAOS,MAAP,eAAeC,SAAf,eACA,eAAkCV,QAAQ,CAAC,EAAD,CAA1C,yCAAOW,UAAP,eAAmBC,aAAnB,eAEAX,SAAS,CAAC,UAAM,SACCY,CAAAA,SADD,qIACd,qKACyBV,CAAAA,KAAK,CAACW,GAAN,CAAUP,QAAV,CADzB,QACWQ,OADX,eAEKL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFL,gCAGYF,OAHZ,wDADc,4CAOdF,SAAS,GACV,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAUA,GAAMW,CAAAA,IAAI,CAAC,CACTC,MAAM,CAAC,KADE,CAETC,KAAK,CAAC,MAFG,CAGTC,UAAU,CAAC,CACT;AACAC,QAAQ,CAAC,CAFA,CAHF,CAAX,CASA,GAAMC,CAAAA,WAAW,CAAC,QAAZA,CAAAA,WAAY,CAACC,KAAD,CAAS,CACzB,GAAGb,UAAH,CAAc,CACZC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEM,CACJd,YAAY,CAAC,CAAA0B,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAElB,KAAP,GAAgB,EAAjB,CAAZ,CACCmB,IADD,CACM,SAACC,GAAD,CAAO,CACX,GAAMC,CAAAA,SAAS,CAAC,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAhB,CACAlB,aAAa,CAACe,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJD,EAKCiB,KALD,CAKO,SAACC,KAAD,QAASC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAT,EALP,EAMD,CACF,CAXD,CAaA,mBACI,oCACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAK1B,KAAL,EADJ,cAGI,YAAK,SAAS,CAAC,aAAf,UAEMG,MAAM,CAAC0B,GAAP,CAAW,SAAAX,KAAK,qBACd,YAEA,OAAO,CAAE,yBAAID,CAAAA,WAAW,CAACC,KAAD,CAAf,EAFT,CAGA,GAAG,WAAKpB,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACY,WAAT,CAAsBZ,KAAK,CAACa,aAAtD,CAHH,CAIA,SAAS,sBAAgB7B,UAAU,EAAI,iBAA9B,CAJT,EACKgB,KAAK,CAACc,EADX,CADc,EAAhB,CAFN,EAHJ,GADJ,CAkBK3B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAlBnB,GADJ,CAwBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import movieTrailer from 'movie-trailer';\r\nimport React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title, fetchURL, isLargeRow}) {\r\n    const [movies, setMovies]=useState([]);\r\n    const [trailerUrl, setTrailerUrl]=useState('');\r\n    \r\n    useEffect(() => {\r\n      async function fetchData() {\r\n           const request=await axios.get(fetchURL);\r\n           setMovies(request.data.results)\r\n           return request;\r\n      }\r\n\r\n      fetchData();\r\n    }, [fetchURL]);\r\n\r\n    const opts={\r\n      height:\"390\",\r\n      width:\"100%\",\r\n      playerVars:{\r\n        // URL\r\n        autoplay:1,\r\n      }\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n      if(trailerUrl){\r\n        setTrailerUrl('');\r\n      } else{\r\n        movieTrailer(movie?.title || \"\")\r\n        .then((url)=>{\r\n          const urlParams=new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error)=>console.log(error));\r\n      }\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <h2>{title}</h2>\r\n\r\n                <div className=\"row_posters\">\r\n                    {\r\n                      movies.map(movie =>(\r\n                        <img \r\n                        key={movie.id}\r\n                        onClick={()=>handleClick(movie)}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                         />\r\n                      ))\r\n                    }\r\n                </div> \r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />} \r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}