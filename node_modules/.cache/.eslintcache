[{"C:\\wamp64\\www\\netflix-app\\src\\index.js":"1","C:\\wamp64\\www\\netflix-app\\src\\reportWebVitals.js":"2","C:\\wamp64\\www\\netflix-app\\src\\App.js":"3","C:\\wamp64\\www\\netflix-app\\src\\Row.js":"4","C:\\wamp64\\www\\netflix-app\\src\\requests.js":"5","C:\\wamp64\\www\\netflix-app\\src\\axios.js":"6","C:\\wamp64\\www\\netflix-app\\src\\Banner.js":"7","C:\\wamp64\\www\\netflix-app\\src\\Nav.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":620,"mtime":1641152401496,"results":"12","hashOfConfig":"10"},{"size":1914,"mtime":1639603277436,"results":"13","hashOfConfig":"10"},{"size":321,"mtime":1639514759188,"results":"14","hashOfConfig":"10"},{"size":142,"mtime":1639486197900,"results":"15","hashOfConfig":"10"},{"size":1623,"mtime":1639598282659,"results":"16","hashOfConfig":"10"},{"size":1005,"mtime":1639601815567,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1av639n",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\wamp64\\www\\netflix-app\\src\\index.js",[],["36","37"],"C:\\wamp64\\www\\netflix-app\\src\\reportWebVitals.js",[],"C:\\wamp64\\www\\netflix-app\\src\\App.js",[],"C:\\wamp64\\www\\netflix-app\\src\\Row.js",["38"],"import movieTrailer from 'movie-trailer';\r\nimport React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title, fetchURL, isLargeRow}) {\r\n    const [movies, setMovies]=useState([]);\r\n    const [trailerUrl, setTrailerUrl]=useState('');\r\n    \r\n    useEffect(() => {\r\n      async function fetchData() {\r\n           const request=await axios.get(fetchURL);\r\n           setMovies(request.data.results)\r\n           return request;\r\n      }\r\n\r\n      fetchData();\r\n    }, [fetchURL]);\r\n\r\n    const opts={\r\n      height:\"390\",\r\n      width:\"100%\",\r\n      playerVars:{\r\n        // URL\r\n        autoplay:1,\r\n      }\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n      if(trailerUrl){\r\n        setTrailerUrl('');\r\n      } else{\r\n        movieTrailer(movie?.title || \"\")\r\n        .then((url)=>{\r\n          const urlParams=new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error)=>console.log(error));\r\n      }\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <h2>{title}</h2>\r\n\r\n                <div className=\"row_posters\">\r\n                    {\r\n                      movies.map(movie =>(\r\n                        <img \r\n                        key={movie.id}\r\n                        onClick={()=>handleClick(movie)}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                         />\r\n                      ))\r\n                    }\r\n                </div> \r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />} \r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Row\r\n","C:\\wamp64\\www\\netflix-app\\src\\requests.js",[],"C:\\wamp64\\www\\netflix-app\\src\\axios.js",[],"C:\\wamp64\\www\\netflix-app\\src\\Banner.js",[],"C:\\wamp64\\www\\netflix-app\\src\\Nav.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":53,"column":25,"nodeType":"45","endLine":58,"endColumn":28},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]