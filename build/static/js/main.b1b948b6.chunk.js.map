{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchPopular","fetchNowPlaying","fetchTopRated","Banner","str","n","setMovie","popularMovies","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1b948b6.chunk.js","sourcesContent":[" import axios from \"axios\";\r\n\r\n const instance=axios.create({\r\n     baseURL:\"https://api.themoviedb.org/3\",\r\n });\r\n\r\n export default instance;","import movieTrailer from 'movie-trailer';\r\nimport React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title, fetchURL, isLargeRow}) {\r\n    const [movies, setMovies]=useState([]);\r\n    const [trailerUrl, setTrailerUrl]=useState('');\r\n    \r\n    useEffect(() => {\r\n      async function fetchData() {\r\n           const request=await axios.get(fetchURL);\r\n           setMovies(request.data.results)\r\n           return request;\r\n      }\r\n\r\n      fetchData();\r\n    }, [fetchURL]);\r\n\r\n    const opts={\r\n      height:\"390\",\r\n      width:\"100%\",\r\n      playerVars:{\r\n        // URL\r\n        autoplay:1,\r\n      }\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n      if(trailerUrl){\r\n        setTrailerUrl('');\r\n      } else{\r\n        movieTrailer(movie?.title || \"\")\r\n        .then((url)=>{\r\n          const urlParams=new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error)=>console.log(error));\r\n      }\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <h2>{title}</h2>\r\n\r\n                <div className=\"row_posters\">\r\n                    {\r\n                      movies.map(movie =>(\r\n                        <img \r\n                        key={movie.id}\r\n                        onClick={()=>handleClick(movie)}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                         />\r\n                      ))\r\n                    }\r\n                </div> \r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />} \r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY=\"4096cd05cb784668e9a6cf3535dff2c0\";\r\n\r\nconst requests={\r\n    fetchPopular:`/movie/popular?api_key=${API_KEY}&language=en-US`,\r\n    fetchNowPlaying:`/movie/now_playing?api_key=${API_KEY}&language=en-US`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n};\r\n\r\nexport default requests;","import axios from './axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport requests from './requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie]=useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const popularMovies=await axios.get(requests.fetchPopular);\r\n            setMovie(popularMovies.data.results\r\n                [\r\n                    Math.floor(Math.random()*popularMovies.data.results.length)\r\n                ]\r\n                );\r\n            return()=>[];\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(str, n){\r\n        return str?.length>n ? str.substr(0, n-1)+\"... \":str;\r\n    }\r\n\r\n    return (\r\n        <header \r\n        className='banner'\r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url(https://image.tmdb.org/t/p/original${movie?.backdrop_path})`,\r\n            backgroundPosition:\"center center\",\r\n        }}\r\n         > \r\n            <div className='banner_contents'>   \r\n              <h1 className='banner_title'>{movie.title }</h1>\r\n                <div className='banner_buttons'>\r\n                    <button className='banner_button'>Play</button>\r\n                    <button className='banner_button'>My List</button>\r\n                </div>\r\n\r\n                <h1 className='banner_description'>\r\n                    {truncate(movie?.overview, 150)}\r\n                    </h1>\r\n            </div>\r\n\r\n            <div className='banner_fadeBottom'>\r\n                \r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n   const [show, handleShow]=useState(false);\r\n\r\n    useEffect(() => {\r\n         window.addEventListener(\"scroll\", ()=>{\r\n             if(window.scrollY>100){\r\n                handleShow(true);\r\n             }\r\n             else{\r\n                 handleShow(false);\r\n             }\r\n         });\r\n\r\n         return ()=>{\r\n             window.removeEventListener(\"scroll\");\r\n         }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}` }>\r\n            <img \r\n             className='nav_logo'\r\n             src='https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg'\r\n             alt='Netflix Logo'\r\n             />\r\n\r\n            <img \r\n             className='nav_avatar'\r\n             src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\r\n             alt='Netflix Logo'\r\n\r\n             />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n    {/* <Hello/> */}\n     <Nav />\n     <Banner />\n      <Row \n      title=\"Netflix Popular Movies\" \n      fetchURL={requests.fetchPopular}\n      isLargeRow={true}\n      />\n      <Row title=\"Now Playing\" fetchURL={requests.fetchNowPlaying}/>\n      {/* <Row title=\"Popular Movies\" fetchURL={requests.fetchPopular}/> */}\n      <Row title=\"Top Rated Movies\" fetchURL={requests.fetchTopRated}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}